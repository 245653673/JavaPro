这样，客户端不需要亲自调用子系统的A、B、C模块了，也不需要知道内部系统的实现细节，甚至不需要知道模块A、模块B、模块C的存在，只需要和
Facade类交互就好了，从而更好地实现了客户端和子系统中的三个模块的解耦，让客户端更容易地使用子系统。

另外，定义一个外观类还可以有效地屏蔽内部的细节。因为子系统中有一些方法，是模块之间相互交互用的，并不需要外部调用。
如果直接调用子系统的类方法，会出现一些不需要客户端知道的方法，这样既暴露了内部细节，又让客户端模迷惑。外观类就不一样了，
可以只给客户端提供那些子系统给外部使用的方法。

之前一直疑惑建造者模式和外观模式的区别，现在解释如下：
外观模式是为client的调用提供一个统一的接口，里面封装了内部对象的创建和交互，对象的创建可以用到创建模式。